@use "sass:math";
@import "~breakpoint-sass/stylesheets/breakpoint";
@import "includes/variables";
@import "includes/defaults";
@import "includes/mixins";
@import "includes/typography";

// Many styles
@import "components/*";

/* Layout
---------------------------------------------------------------------------------- */

html,
body {
	width: 100%;
	margin: 0;
	@include print {
		height: 99%;
		page-break-after: auto;
	}
}

html {
	letter-spacing: 0.02em;
	font-size: #{$font-size};
	font-family: #{$font-family};
	line-height: $lh;
	color: $text-color;
	@include normal;
	@include smoothFonts;
	overflow-y: scroll;
	overflow-x: hidden;
	@media (prefers-reduced-motion: no-preference) {
		scroll-behavior: smooth;
	}
}

body {
	min-height: 100vh;
	height: stretch;
	display: flex;
	flex-direction: column;
}

@supports (-webkit-touch-callout: none) {
	body {
		height: -webkit-fill-available;
	}
}

.bold,
strong {
	@include bold;
}

// #BetterNavigator {
// 	display:none !important;
// }

#header {
	display: flex;
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	z-index: 9000;
	width: 100%;
	will-change: transform;
	transition-duration: 0.2s;
	transition-property: transform;
	transition-timing-function: ease-out;
	transform: translateY(0%);
	box-shadow: none;
	background-color: $white;
	height: $headerheight;
	@include breakpoint($Lneg) {
		height: $headerheight--small;
	}
	@include breakpoint($Sneg) {
		height: $headerheight--smaller;
	}
	.inner {
		display: grid;
		grid-template-rows: #{$lh * 1.2}em 1fr;
		grid-template-columns: auto 1fr;
		// max-width: calc(#{$inner-width + 200px});
		@include breakpoint($Lneg) {
			// min-height: 100vh;
			grid-template-rows:
				#{$lh * 1.2}em
				calc(#{$headerheight--smaller} - #{$lh * 1.2}em)
				1fr;
		}
		a.logo {
			display: flex;
			flex-direction: column;
			justify-content: center;
			width: 280px;
			height: 100%;
			grid-row: 1 / 3;
			grid-column: 1 / 2;
			@include breakpoint($Lneg) {
				width: 180px;
			}
			svg,
			img {
				width: 100%;
				height: auto;
			}
		}
		&.nav {
			// this things are living in _menu.scss
		}
	}
	&.headroom {
		&.headroom--top {
			// shuldn't do anything here to prevent fouc
		}
		&.headroom--not-top {
			box-shadow: 0 0 0.7em rgba($black, 0.3);
		}
		&.headroom--pinned {
			transform: translateY(0%);
		}
		&.headroom--unpinned {
			transform: translateY(-100%);
			box-shadow: none;
		}
	}
}

body > main {
	width: 100%;
	flex: 1 1 auto;
	border-top: $headerheight solid transparent;
	@include breakpoint($Lneg) {
		border-top-width: $headerheight--small;
	}
	@include breakpoint($Sneg) {
		border-top-width: $headerheight--smaller;
	}
}

.inner {
	width: 100%;
	max-width: $inner-width;
	margin: 0 auto;
	@include horizontal-spacing;
}

.vertical-spacing {
	> *:last-child {
		margin-bottom: 0;
	}
	@include vertical-spacing;
}

.horizontal-spacing {
	@include horizontal-spacing;
}

nav.breadcrumbs {
	padding: #{$lh}em 0 #{$lh * 2}em 0;
	text-align: left;
	// .typography {
	// 	max-width: $inner-width;
	// 	margin-left: auto;
	// 	margin-right: auto;
	// }
	a,
	span,
	.delimiter {
		font-size: $font-size--small;
		color: $text-color;
	}
	a {
		@include bold;
	}
	.delimiter {
		display: inline-block;
		width: 1em;
		height: 1em;
		margin: 0 0.2em;
		background-repeat: no-repeat;
		background-image: svg-load("../images/svg/delimiter.svg");
		background-position: bottom center;
		background-size: 0.3em;
	}
}

p.cat-tag {
	display: flex;
	gap: #{math.div($lh, 1)}em;
	flex-wrap: wrap;
	justify-content: flex-start;
	margin: 0;
	padding: #{$lh}em 0 #{$lh * 2}em 0;
	> span,
	> a {
		display: inline-block;
		padding: calc(#{math.div($lh, 4)}em - 2px)
			calc(#{math.div($lh, 2)}em - 2px); // same spacing as @buttonstyle
		border-width: 2px;
		border-style: solid;
		border-color: $text-color;
		color: $text-color;
		@include bold;
		&:last-child {
			margin-right: 0;
		}
		&.current {
			color: $white;
			background-color: $text-color;
		}
		&:not(.current) {
			background-color: transparent;
		}
	}
	> a.all:not(.current) {
		border-color: transparent;
		padding-left: 0;
		padding-right: 0;
		&::before {
			display: inline-block;
			content: "";
			width: #{$lh * 0.6}em;
			height: 1em;
			background-size: auto 0.6em;
			background-repeat: no-repeat;
			background-position: right 0 center;
			background-image: svg-load(
				"../images/svg/arrow-outline.svg",
				fill=#{$text-color}
			);
			transform: rotate(180deg);
			margin-right: #{math.div($lh, 4)}em;
			vertical-align: -0.1em;
		}
	}
}

.element {
	&:not(.full-width) {
		max-width: $inner-width;
	}
	width: 100%;
	margin-left: auto;
	margin-right: auto;
	position: relative;
	scroll-margin-top: $headerheight;
	$betternav--red: #d73f1d;
	$betternav--green: #068913;
	outline: none;
	>a.preview-edit {
		position: absolute;
		z-index: 8000;
		top: #{math.div($lh, 2)}em;
		right: #{math.div($lh, 2)}em;
		width: #{$lh}em;
		height: #{$lh}em;
		justify-content: center;
		align-items: center;
		border-radius: #{$lh}em;
		background-color: rgba($betternav--green, .7);
		color: $white;
		display: none;
		&.draft {
			background-color: rgba($betternav--red, .7);
		}
		&.modified {
			border: 2px solid $betternav--red;
		}
		span {
			margin: auto;
			transform: scaleX(-1);
		}
		@include breakpoint($XLplus) {
			display: flex;
		}
	}
	&:has(a.preview-edit:hover) {
		&::after {
			content: "";
			position: absolute;
			top: 0;
			right: -50vw;
			bottom: 0;
			left: -50vw;
			z-index: 50;
			background-color: rgba($betternav--green, 0.1);
			mix-blend-mode: multiply;
			pointer-events: none;
		}
	}
	&:has(a.preview-edit.draft:hover) {
		&::after {
			background-color: rgba($betternav--red, 0.1);
		}
	}
	&::after {
		content: "";
		position: absolute;
		z-index: -1;
		top: 0;
		right: -100%;
		bottom: 0;
		left: -100%;
		// prevents horizontal overflow on ios
		@include breakpoint($XLneg) {
			left: 0;
			right: 0;
		}
	}
	&.background--transparent {
		&::after {
			background-color: transparent;
		}
	}
	&.background--white {
		&::after {
			background-color: $white;
		}
	}
	&.background--gray--lighter {
		&::after {
			background-color: $gray--lighter;
		}
	}
	.element-title {
		flex: 0 0 100%;
	}

	// &[class^="element"],
	// &.elementjobs.show,
	// &.elementform,
	// &.elementcontent,
	// &.elementcontentsection,
	// .page & {
	// 	.inner {
	// 		> *:not(.embed) {
	// 			max-width: $inner-width--reduced;
	// 			margin-left: 0;
	// 			margin-right: auto;
	// 		}
	// 	}
	// }
	.typography.width-reduced {
		max-width: $inner-width--reduced;
		margin-left: 0;
		margin-right: auto;
	}
	&.elementcontent[class*='push-up-'] {
		padding-top: #{math.div($lh, 3) * 2}em;
		@include breakpoint($XLplus) {
			position: relative;
			z-index: 100;
			&::after {
				background-color: transparent;
			}
			&.background--transparent {
				background-color: transparent;
			}
			&.background--white {
				background-color: $white;
			}
			&.background--gray--lighter {
				background-color: $gray--lighter;
			}
			.large {
				font-size: clamp(1.2em, 5vw, 2em);
			}
		}
	}
	&.elementcontent {
		.typography {
			> *:last-child {
				margin-bottom: 0;
			}
		}
	}
	&.elementhero {
		display: flex; // swiper.js shouldn't life in a display: table element otherwise layout breaks
		// with DefaultHero the image isn't wrapped with swiper divs
		&:not(.full-width) {
			max-width: calc(#{$inner-width + 300px});
		}
		.swiper-container {
			width: 100%;
		}
		figure {
			height: 100%;
			width: 100%;
			margin: 0;
			img {
				height: 100%;
				width: 100%;
				object-fit: cover;
				max-width: none;
				margin-bottom: 0;
			}
		}
		.hero--small,
		.hero--medium {
			figure {
				img {
					max-width: none;
				}
			}
		}
		.hero--small {
			max-height: 500px;
			figure {
				@include breakpoint($Mneg) {
					// arbitrary ratio to prevent small (stripe alike )images on small viewports
					aspect-ratio: 10 / 3;
				}
				@include breakpoint($Sneg) {
					// arbitrary ratio to prevent small (stripe alike )images on small viewports
					aspect-ratio: 5 / 2;
				}
				img {
					max-height: 500px;
				}
			}
		}
		.hero--medium {
			$higherMax: 700px;
			$lowerMax: 400px;
			max-height: $higherMax;
			@include breakpoint($L $XL) {
				max-height: $lowerMax;
			}
			figure {
				@include breakpoint($Sneg) {
					// arbitrary ratio to prevent small (stripe alike )images on small viewports
					aspect-ratio: 3 / 2;
				}
				img {
					max-height: $higherMax;
					@include breakpoint($L $XL) {
						max-height: $lowerMax;
					}
				}
			}
		}
		.txt {
			position: absolute;
			top: 0;
			bottom: 0;
			left: 0;
			right: 0;
			.inner {
				height: 100%;
				display: flex;
				flex-direction: column;
				justify-content: flex-end;
				align-items: flex-end;
				.spacer {
					margin: 0;
					width: 100%;
					max-width: $inner-width--reduced;
					display: flex;
					flex-direction: column;
				}
				p,
				h1,
				h2,
				h3 {
					font-size: 1.5em;
					text-shadow: 0 0 0.7em rgba($text-color, 0.5);
					color: $white;
				}
				h1,
				h2,
				h3 {
					margin: 0;
				}
				p {
					@include normal;
					margin-bottom: 0;
					padding: #{math.div($lh, 2)}em 0;
				}
			}
			&.upper-left .inner {
				padding-top: #{$lh}em;
				justify-content: flex-start;
				align-items: flex-start;
				.spacer {
					margin: 0 auto auto 0;
				}
				p,
				h1,
				h2,
				h3 {
					text-align: left;
				}
			}
			&.upper-right .inner {
				padding-top: #{$lh}em;
				justify-content: flex-end;
				align-items: flex-start;
				.spacer {
					margin: 0 0 auto auto;
				}
				p,
				h1,
				h2,
				h3 {
					text-align: right;
				}
			}
			&.lower-left .inner {
				justify-content: flex-start;
				align-items: flex-start;
				.spacer {
					margin: auto auto 0 0;
				}
				p,
				h1,
				h2,
				h3 {
					text-align: left;
				}
			}
			&.lower-center .inner {
				justify-content: center;
				align-items: flex-end;
				.spacer {
					margin: auto auto 0 auto;
				}
				p,
				h1,
				h2,
				h3 {
					text-align: center;
				}
			}
			&.lower-right .inner {
				justify-content: flex-end;
				align-items: flex-end;
				.spacer {
					margin: auto 0 0 auto;
				}
				p,
				h1,
				h2,
				h3 {
					text-align: right;
				}
			}
			&.center .inner {
				justify-content: center;
				align-items: center;
				.spacer {
					margin: auto;
				}
				p,
				h1,
				h2,
				h3 {
					text-align: center;
				}
			}
			@include breakpoint($Lneg) {
				position: inherit;
				.spacer {
					padding: #{math.div($lh, 2)}em 0 0 0;
					position: relative;
					&::after {
						content: "";
						position: absolute;
						left: -#{$lh}em;
						right: -#{$lh}em;
						top: 0;
						bottom: 0;
						pointer-events: none;
						background-color: $gray--light;
						z-index: 0;
					}
					p,
					h1,
					h2,
					h3 {
						font-size: 1em;
						text-shadow: none;
						color: $text-color;
						position: relative;
						z-index: 1;
					}
				}
			}
		}
		.swiper-container.hero {
			overflow: hidden;
			&.hero--fullscreen {
				height: calc(100vh - $headerheight);
				@include breakpoint($Lneg) {
					height: calc(100vh - $headerheight--small);
				}
			}
			.swiper-wrapper {
				height: 100%;
				.swiper-slide {
					height: 100%;
					opacity: 1;
				}
			}
		}
		.swiper-container.do-not-crop.hero--small,
		.swiper-container.do-not-crop.hero--medium {
			max-height: initial;
			figure {
				img {
					max-height: initial;
				}
			}
		}
		// .headroom--top &.fullscreen:first-of-type .scroll {
		@keyframes bounce {
			0%,
			20%,
			50%,
			80%,
			100% {
				transform: translateY(0);
				opacity: 6;
			}
			40% {
				transform: translateY(-20px);
				opacity: 0.6;
			}
			60% {
				transform: translateY(-10px);
				opacity: 0.8;
			}
		}
		.scroll {
			display: none;
			will-change: transform, opacity;
			transition: transform, opacity;
			transition-duration: 160ms;
			background-repeat: no-repeat;
			background-image: svg-load("../images/svg/mouse.svg");
			background-position: bottom center;
			background-size: 100%;
			width: 1.5em;
			height: 3.4em;
			position: absolute;
			bottom: 2%;
			left: calc(50% - 1.25em);
			z-index: 100;
		}
		#header:not(.headroom--unpinned)
			+ &
			.swiper-container.fullscreen
			.scroll {
			display: block;
			animation: bounce 1.6s ease-in-out infinite;
		}
		&.default {
			figure {
				display: flex;
			}
		}
		&.breadcrumbs {
			padding-bottom: 0;
			margin-bottom: 0;
			.swiper-pagination {
				bottom: #{math.div($lh, 2)}em;
			}
		}
		&.global-alert {
			padding-bottom: 0 !important;
		}
	}
	&.elementform {
		#uff {
			scroll-margin-top: calc(#{$headerheight} + #{$lh}em);
		}
	}
	&.elementmaps {
		display: flex;
		flex-wrap: wrap;
		gap: #{$lh}em;
		p.gm-style-pbt {
			font-size: initial;
		}
		img {
			max-width: none;
			margin-bottom: initial; // checkbox-placing otherwise clashes with typography img
		}
		.txt {
			@include breakpoint($Lplus) {
				flex: 0 0 calc(50% - #{math.div($lh, 2)}em);
			}
		}
		#map_canvas {
			box-sizing: unset;
			height: 0;
			width: 100%;
			flex: 0 0 100%;
			padding-bottom: 45%;
			&.has-txt {
				@include breakpoint($Lplus) {
					flex: 0 0 calc(50% - #{math.div($lh, 2)}em);
				}
			}
			@include breakpoint($Lneg) {
				padding-bottom: 60%;
			}
			@include breakpoint($Mneg) {
				padding-bottom: 100%;
			}
		}
	}

	&.elementpdfdocument {
		.txt {
			max-width: $inner-width--reduced;
			padding-bottom: #{$lh}em;
		}
		div.swiper-container .swiper-wrapper {
			margin: 0;
		}
		.card {
			display: flex;
			flex-direction: column;
			width: auto;
			header {
				color: $text-color;
				@include bold;
				// font-size: 1.24em;
				padding: #{math.div($lh, 4)}em 0;
			}
			figure {
				display: flex;
				// height: 600px;
				width: auto;
				position: relative;
				overflow: hidden;
				margin: 0;
				// @include breakpoint($Lneg) {
				// 	height: 500px;
				// }
				img {
					display: table;
					height: 100%;
					width: auto;
					margin-bottom: 0;
				}
				figcaption {
					position: absolute;
					top: 0;
					right: 0;
					bottom: 0;
					left: 0;
					display: flex;
					flex-direction: column;
					justify-content: flex-start;
					background-color: rgba($white, 1);
					// padding: #{math.div($lh, 2)}em;
					pointer-events: none;
					transform: translateY(100%);
					transition: transform .2s ease-in;
					color: $text-color;
					overflow: hidden;
				}
				&:hover figcaption {
					transform: translateY(0);
				}
			}
		}
	}

	&.elementtextimage {
		// this things are living in textimage.scss
	}
	&.elementperso {
		// this things are living in perso.scss
	}
	&.elementcontentsection {
		// this things are living in contentsections.scss
	}
	&.elementlogo {
		// this things are living in logo.scss
	}
	&.elementjobs {
		// this things are living in jobs.scss
	}
	$min-spacing: 0;
	$max-spacing: 6;
	@for $i from $max-spacing through $min-spacing {
		.element:not(.global-alert) + &.push-up-#{$i} {
			@include breakpoint($XLplus) {
				margin-top: #{(($lh * $i) + .2) * -1}em; // odd addition of .2 to better match line-height ;-/
			}
		}
		$i1: $i + 1;
	}
	@for $i from $max-spacing through $min-spacing {
		&.spacing-bottom-#{$i} {
			padding-bottom: #{$lh * $i}em;
		}
		$i1: $i + 1;
	}
	@for $i from $max-spacing through $min-spacing {
		&.spacing-top-#{$i} {
			padding-top: #{$lh * $i}em;
		}
		$i1: $i + 1;
	}
}

@media print {
	footer {
		display: none;
	}
	.inner {
		max-width: 100%;
	}
}
@page {
	size: 297mm 210mm;
	margin: 15mm;
}

// todo - unify/cleanup styles
// this is use in ElementPage_job
// classes are same as in backend
// how does userform handle such things?
.alert {
	border: 1px solid;
	padding: #{math.div($lh, 2)}em;
	border-radius: #{math.div($lh, 4)}em;
	margin-bottom: #{math.div($lh, 2)}em;
	&.alert-warning {
		background-color: rgba($red, 0.1);
		border-color: rgba($red, 1);
	}
}

.link.forth {
	display: inline-block;
	color: #{$link-color};
	@include arrow-after($link-color);
}

.parent-link.back {
	display: inline-block;
	color: #{$link-color};
	@include arrow-before($link-color);
}

.global-alert:not(.elementhero) {
	background-color: $blue;
	padding: #{math.div($lh, 2)}em 0;
	margin-bottom: #{$lh}em;
	.inner > * {
		color: $white;
		&:last-child {
			margin-bottom: 0;
		}
	}
}

.social-icons {
	margin: auto 0 0;
	display: flex;
	gap: #{$lh}em;
	a {
		transition: transform 0.05s linear;
		// coloring svg with https://codepen.io/sosuke/pen/Pjoqqp
		img {
			width: 1em;
			height: auto;
			filter: invert(100%) sepia(0%) saturate(7500%) hue-rotate(252deg)
				brightness(101%) contrast(102%);
		}
		&:hover {
			img {
				filter: invert(36%) sepia(58%) saturate(6458%)
					hue-rotate(327deg) brightness(96%) contrast(85%);
				transform: scale(1.08);
			}
		}
	}
}

// !klaro
html .klaro {
	--notice-max-width: 440px;
	.cookie-modal,
	.cookie-notice {
		a {
			color: lighten($link-color, 70%);
		}
		.cm-btn {
			cursor: pointer;
			font-size: 14px;
			border-radius: 0.1em;
			margin-right: 1.2em;
		}
	}

	.cookie-notice {
		.cn-body {
			// klaro sets font-size on block elements - we're calculating back to maintain horizontal spacing :-/
			@media (max-width: 1023px) {
				padding-right: #{$lh * math.div($font-size, 14px)}em !important;
				padding-left: #{$lh * math.div($font-size, 14px)}em !important;
				@include breakpoint($Mneg) {
					padding-right: #{0.5 * $lh * math.div($font-size, 14px)}em !important;
					padding-left: #{0.5 * $lh * math.div($font-size, 14px)}em !important;
				}
			}
		}
		h2 {
			font-size: 1.1em;
			margin-top: 0.6em;
		}
		p {
			margin: 0.3em 0 !important;
		}
		.cn-ok {
			display: flex;
			flex-wrap: wrap;
			justify-content: flex-start !important;
			.cn-buttons {
				display: flex !important;
				order: 1;
				// decline
				.cm-btn.cn-decline {
					background-color: $gray;
					order: 1;
				}
				// accept all
				.cm-btn.cm-btn-success {
					background-color: $link-color;
					order: 0;
				}
			}
			// modal link
			.cn-learn-more {
				display: block;
				margin-right: 0;
				order: 2;
				flex: 0 0 auto;
				padding: 0.5em 0;
			}
		}
	}

	.cookie-modal {
		.cm-header a {
			@include bold;
		}
		.cm-app-title {
			font-size: 14px;
		}
		// switch disabled
		.cm-list-label .slider {
			background-color: $gray;
		}
		// slider-switches
		.cm-list-input:checked + .cm-list-label .slider {
			background-color: $link-color;
		}
		// required switch enabled
		.cm-list-input.required:checked + .cm-list-label .slider {
			background-color: darken($link-color, 10%);
			&::before {
				background-color: darken($white, 16%);
			}
		}
		// halve is used on parent if children are on & off
		.cm-list-input.half-checked:checked + .cm-list-label .slider {
			background-color: mix($link-color, $white, 71%);
		}
		.cm-list-description {
			color: $gray--light;
		}
		// accept all
		.cm-btn.cm-btn-accept-all {
			background-color: $link-color;
		}
		// save selection, decline
		.cm-btn.cm-btn-accept,
		.cm-btn.cm-btn-decline {
			background-color: $gray;
		}
		// klaro link
		.cm-modal .cm-footer .cm-powered-by {
			display: none;
		}
	}
}
// klaro! contextual consent
[data-type="placeholder"] {
	position: absolute;
	background-color: $gray--light;
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
	width: 100%;
	height: 100%;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	padding: #{$lh}em;
	.cm-as-context-notice {
		height: auto;
	}
	.context-notice {
		&:last-child {
			margin-bottom: 0;
		}
		.cm-buttons {
			display: flex;;
			gap: 1em;
		}
		button.cm-btn {
			display: inline-block;
			padding: #{math.div($lh, 4)}em #{math.div($lh, 2)}em;
			border: none;
			text-transform: uppercase;
			color: $white;
			font-size: 1em;
			@include bold;
			border-radius: 0;
			margin: 0 !important;
			cursor: pointer;
			&:first-of-type {
				background-color: $link-color;
			}
			&:last-of-type {
				background-color: mix($link-color, $gray--light, 70%);
			}
			&:not(:last-of-type) {
				margin-right: #{$lh}em;
			}
		}
	}
}

.grecaptcha-badge {
	visibility: hidden;
}
p.terms-legend {
	margin-bottom: #{math.div($lh, 2)}em;
	font-size: $font-size--small;
}
html div.nocaptcha {
	display: block !important;
	.middleColumn {
		input {
			display: none;
		}
		p.terms-legend {
			display: block;
		}
	}
}

$loader-color: $link-color;
$loader-size: 4;
.loader,
.loader:after {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	z-index: 100;
	border-radius: 50%;
	width: #{$loader-size}em;
	height: #{$loader-size}em;
	pointer-events: none;
	transition: opacity linear 0.3s;
}
.loader {
	margin: #{math.div($loader-size, 2)}em auto auto;
	text-indent: -9999em;
	border: #{math.div($loader-size, 6)}em solid rgba($loader-color, 0.1);
	border-left: #{math.div($loader-size, 6)}em solid $loader-color;
	transform: translateZ(0);
	animation: load8 1s infinite linear;
	display: none;
	flex: 1 1 100%;
	align-self: center;
	justify-self: center;
	&.htmx-request {
		display: flex;
	}
}
@keyframes load8 {
	0% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(360deg);
	}
}
