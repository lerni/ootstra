@use "sass:math";
@import "includes/variables";
@import "includes/mixins";
@import "~breakpoint-sass/stylesheets/breakpoint";

.element.elementpdfdocument,
.element.elementteaser,
.element.elementfeedteaser {
	.cards {
		display: flex; // we use flex (not grid) cos ShowAsSlider would otherwise break swiper.js
		flex-wrap: wrap;
		gap: #{$lh * 2}em;
		width: 100%;
		.card {
			color: $text-color;
			position: relative;
			figure {
				width: 100%;
				margin: 0;
				display: flex;
				overflow: hidden;
				img {
					width: 100%;
					height: auto;
					margin-bottom: 0;
					transform: scale(1);
					will-change: transform;
					transition: transform 140ms ease-out;
				}
			}
			.txt {
				padding: #{math.div($lh, 2)}em 0 0 0;
				h2,
				h3,
				h4 {
					font-size: 1em;
					margin: 0 0 #{math.div($lh, 2)}em 0;
				}
				p {
					@include normal;
					margin: 0;
				}
			}
		}
		a.card:hover {
			figure {
				img {
					// transform: scale(1.02);
				}
			}
		}
		// just hover if it's really a link
		a.card {
			.link.forth:hover {
				&::after {
				}
			}
		}
		&.third {
			.card {
				flex: 0 0 calc(#{percentage(math.div(1, 3))} - #{math.div($lh * 4, 3)}em);
				display: flex;
				flex-direction: column;
				@include breakpoint($Lneg) {
					flex: 0 0 calc(#{percentage(math.div(1, 2))} - #{math.div($lh * 2, 2)}em);
				}
				@include breakpoint($Mneg) {
					flex: 0 0 100%;
				}
				figure {
					flex: 0 0 auto;
				}
				.txt {
					padding: #{math.div($lh, 2)}em 0;
					padding-bottom: 0;
					position: inherit;
					flex: 0 0 auto;
				}
				.link.forth {
					padding: #{math.div($lh, 2)}em 0;
					margin: auto 0 0;
				}
			}
		}
		&.halve {
			.card {
				flex: 0 0 calc(#{percentage(math.div(1, 2))} - #{math.div($lh * 1, 2)}em);
				@include breakpoint($Mneg) {
					flex: 0 0 100%;
				}
				.txt {
					padding: #{math.div($lh, 2)}em 0 0 #{$lh}em;
					max-width: calc(100% - #{$lh * 3}em);
					min-width: calc(100% - #{$lh * 3}em);
// 					@include breakpoint($Mneg) {
// 						width: 100%;
// 						padding-left: 0;
// 						padding-right: 0;
// 					}
// 					p,
// 					.link.forth {
// 						float: left;
// 						width: 100%;
// 					}
// 					.accordion {
// 						max-height: 0;
// 						overflow: hidden;
// 						will-change: max-height;
// 						transition: max-height 320ms ease-out;
// 					}
				}
				&:hover {
					.txt {
						.accordion {
							max-height: 400px;
						}
					}
				}
				&.left {
					.txt {
						padding: #{math.div($lh, 2)}em #{$lh}em 0 0;
					}
				}
			}
		}
		&.full {
			.card {
				flex: 0 0 100%;
				.txt {
					width: calc(50% + #{math.div($lh, 2)}em);
					padding: #{$lh}em #{$lh}em 0;
				}
				&:hover {
					.txt {
						.accordion {
							max-height: 600px;
						}
					}
				}
				&.left {
					.txt {
						padding-left: 0;
					}
				}
			}
		}
		&.halve,
		&.full {
			.card {
				.txt {
					right: 0;
					bottom: 0;
					@include breakpoint($Mneg) {
						position: inherit;
						left: auto;
						bottom: auto;
						width: 100%;
						padding-left: 0;
						padding-right: 0;
						.accordion {
							max-height: 0;
						}
					}
					p,
					.link.forth {
						width: 100%;
					}
					.accordion {
						overflow: hidden;
						will-change: max-height;
						transition: max-height 320ms ease-out;
						@include breakpoint($Mplus) {
							max-height: 0;
						}
					}
				}
				&:hover {
					.txt {
						.accordion {
							overflow: show;
						}
					}
				}
				&.left {
					.txt {
						padding-left: 0;
						left: 0;
						right: auto;
					}
				}
			}
		}
	}
	// case slider
	.swiper-container {
		@include breakpoint($XLneg) {
			overflow-x: hidden;
		}
		.swiper-wrapper {
			flex-wrap: nowrap;
			gap: 0; // setting gaps in swiper.js aligns better, otherwise we see an offset which accumulates with each slide
			// to horizontaly align .forth.link this would do, but probable this isn't desirable
			// .swiper-slide {
			// 	height: auto;
			// }
		}
	}
	// targets FirstLinkAction in FeedTeaser
	.typography > a.link.forth {
		margin: #{$lh}em auto 0 0;
		@include buttonstyle;
		display: inline-block;
		&::after {
			display: none;
		}
	}
}
