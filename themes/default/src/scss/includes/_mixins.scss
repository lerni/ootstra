/* Mixins
---------------------------------------------------------------------------------- */

/* Media queries
---------------------------------------------------------------------------------- */
@mixin respond($width, $minMax: "min") {
	@if (type-of($width) == "string") {
		$width: unquote($width);
	}

	@media screen and (#{$minMax}-width: $width) {
		@content;
	}
}

// mixin cos depending on webfont-setup things are easier that way
@mixin bold {
	font-weight: $font-weight--bold;
}
@mixin normal {
	font-weight: $font-weight--normal;
}
/* Strip 'px', 'rem' etc units from a number
---------------------------------------------------------------------------------- */
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

@mixin iconfontsettings {
	font-family: "icons";
	font-style: normal;
	font-weight: normal;
	font-variant: normal;
	text-transform: none;
	speak: none;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin smoothFonts {
	-webkit-text-size-adjust: none;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	-ms-text-size-adjust: 100%;
	text-size-adjust: none;
}

@mixin vertical-spacing {
	padding-top: #{$lh}em;
	padding-bottom: #{$lh}em;
	@include breakpoint($Mneg) {
		padding-top: #{math.div($lh, 2)}em;
		padding-bottom: #{math.div($lh, 2)}em;
	}
}

@mixin horizontal-spacing {
	padding-left: #{$lh}em;
	padding-right: #{$lh}em;
	@include breakpoint($Mneg) {
		padding-left: #{math.div($lh, 2)}em;
		padding-right: #{math.div($lh, 2)}em;
	}
}

@mixin dropdown() {
	appearance: none;
	border-radius: 0;
	background-repeat: no-repeat;
	background-position: top 50% right 0.7em;
	background-image: svg-load(
		"../images/svg/arrow-down.svg",
		stroke=#{$text-color},
		stroke-width=20
	);
	background-size: 1.2em 0.6em;
	&:-moz-focusring {
		text-shadow: 0 0 0 #000;
	}
	&::-ms-expand {
		display: none;
	}
	option {
		@include normal;
	}
}

@mixin print {
	@media print {
		@content;
	}
}

@mixin ie11 {
	@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
		@content;
	}
}

@mixin separated($separator: "| ", $color: $text-color) {
	&:not(:last-of-type) {
		@include breakpoint($Mneg) {
			flex: 0 1 100%;
		}
		&::after {
			margin: 0 #{$lh}em;
			content: "#{$separator}";
			color: $color;
			@include breakpoint($Mneg) {
				display: none;
				content: "";
			}
		}
	}
}

@mixin sliderpagination($size, $color) {
	$color: $white !default;
	$size: $lh * 0.7 !default;
	.swiper-pagination {
		position: absolute;
		left: 0;
		right: 0;
		z-index: 100;
		$min-spacing: 0;
		$max-spacing: 6;
		@for $i from $max-spacing through $min-spacing {
			&.spacing-bottom-#{$i} {
				bottom: #{$i * $lh + 0}em;
			}
			$i1: $i + 1;
		}
		.breadcrumbs &,
		.global-alert & {
			bottom: 0 !important;
		}
	}
	.swiper-pagination-progressbar {
		$height: $size * 0.3 !default;
		width: 100%;
		height: #{$height}em;
		bottom: 0;
		background-color: mix(rgba($color, .3), rgba($white, .2), 60%);
		.swiper-pagination-progressbar-fill {
			height: 100%;
			background-color: rgba($color, .7);
			display: block;
			transform-origin: top left;
		}
	}
	.swiper-pagination-bullets {
		height: #{$size * 2}em;
		display: flex;
		justify-content: center;
		.swiper-pagination-bullet {
			width: #{$size}em;
			height: #{$size}em;
			display: inline-block;
			border-radius: 100%;
			background-color: rgba($color, 0);
			border: 2px solid $color;
			opacity: 0.7;
			margin-bottom: #{$size}em;
			&:not(:last-of-type) {
				margin-right: #{$size}em;
			}
			&.swiper-pagination-bullet-active {
				opacity: 1;
				background-color: rgba($color, 1);
			}
		}
		@include breakpoint($Lneg) {
			display: none;
		}
	}
}

@mixin arrow-before($color: $link-color, $arrow-width-hover: 2em, $arrow-width-small: 1.1em) {
	&::before {
		@include arrow($color, $arrow-width-hover, $arrow-width-small);
		background-position: bottom .3em right 0;
		transform: rotate(180deg);
		margin-left: $arrow-width-small;
		margin-right: 0.3em;
	}
	&:hover {
		filter: contrast(110%) saturate(110%);
		&::before {
			margin-left: 0;
			width: $arrow-width-hover;
		}
	}
}

@mixin arrow-after($color: $link-color, $arrow-width-hover: 2em, $arrow-width-small: 1.1em) {
	&::after {
		@include arrow($color, $arrow-width-hover, $arrow-width-small);
	}
	&:hover {
		filter: contrast(110%) saturate(110%);
		&::after {
			margin-right: 0;
			width: $arrow-width-hover;
		}
	}
}

// this is meant to be used with arrow-before & arrow-after, not directly
@mixin arrow($color, $arrow-width-hover, $arrow-width-small) {
	content: "";
	display: inline-block;
	width: ($arrow-width-hover - $arrow-width-small);
	height: 1em;
	margin-left: 0.3em;
	margin-right: $arrow-width-small;
	background-size: auto 70%;
	background-repeat: no-repeat;
	background-position: top .3em right 0;
	background-image: svg-load(
		"../images/svg/arrow-forward.svg",
		stroke-width=4,
		stroke=#{$color}
	);
	transition: all;
	transition-duration: .12s;
}

@mixin buttonstyle($color: $white, $background: $link-color) {
	@include bold;
	letter-spacing: .04em;
	text-decoration: none;
	font-size: 1em;
	cursor: pointer;
	padding: #{math.div($lh, 4)}em #{math.div($lh, 2)}em;
	border: none;
	-webkit-appearance: none;
	color: $color;
	background-color: $background;
	// background-image: linear-gradient(
	// 	130deg,
	// 	$blue,
	// 	$red,
	// 	$blue
	// );
	// background-size: 400% 100%;
	filter: contrast(100%) saturate(100%);
	transition-duration: .3s;
	// transition-property: background-position filter;
	transition-property: filter;
	transition-timing-function: ease-in-out;
	box-shadow: none;
	// background-position: 0% 0;
	display: block;
	&:hover {
		// background-position: 100% 20%;
		filter: contrast(110%) saturate(110%);
	}
	&:focus-visible {
		outline: 2px solid $link-color;
	}
}
