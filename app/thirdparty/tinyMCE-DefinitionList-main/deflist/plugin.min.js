tinymce.PluginManager.add("deflist",(function(t,e){t.hasPlugin("lists")||console.error("Please use the Lists plugin together with the Definition List plugin.");const i=t=>!(t=>null==t)(t);class n{constructor(t,e){this.tag=t,this.value=e}static some(t){return new n(!0,t)}static none(){return n.singletonNone}fold(t,e){return this.tag?e(this.value):t()}isSome(){return this.tag}isNone(){return!this.tag}map(t){return this.tag?n.some(t(this.value)):n.none()}bind(t){return this.tag?t(this.value):n.none()}exists(t){return this.tag&&t(this.value)}forall(t){return!this.tag||t(this.value)}filter(t){return!this.tag||t(this.value)?this:n.none()}getOr(t){return this.tag?this.value:t}or(t){return this.tag?this:t}getOrThunk(t){return this.tag?this.value:t()}orThunk(t){return this.tag?this:t()}getOrDie(t){if(this.tag)return this.value;throw new Error(null!=t?t:"Called getOrDie on None")}static from(t){return i(t)?n.some(t):n.none()}getOrNull(){return this.tag?this.value:null}getOrUndefined(){return this.value}each(t){this.tag&&t(this.value)}toArray(){return this.tag?[this.value]:[]}toString(){return this.tag?`some(${this.value})`:"none()"}}n.singletonNone=new n(!1);const r=t=>e=>i(e)&&t.test(e.nodeName),s=r(/^(OL|UL|DL)$/),o=r(/^(TH|TD)$/),d=(t,e)=>((t,e,i)=>{for(let r=0,s=t.length;r<s;r++){const s=t[r];if(e(s,r))return n.some(s);if(i(s,r))break}return n.none()})(t,s,o).exists((t=>t.nodeName===e&&!(t=>/\btox\-/.test(t.className))(t)));t.options.register("deflist_iconsize",{processor:"number",default:24});const l=t.options.get("deflist_iconsize"),h={deflist:'<svg height="'+l+'" width="'+l+'" viewBox="0 0 100 100">  <rect x="8" y="12" width="60" height="9" rx="4"/>  <rect x="25" y="29" width="64" height="5" rx="2"/>  <rect x="25" y="41" width="64" height="5" rx="2"/>  <rect x="8" y="56" width="60" height="9" rx="4"/>  <rect x="25" y="73" width="64" height="5" rx="2"/>  <rect x="25" y="85" width="64" height="5" rx="2"/></svg>',deflist_title:'<svg height="'+l+'" width="'+l+'" viewBox="0 0 100 100">  <rect x="8" y="12" width="60" height="9" rx="4"/>  <rect fill="#707070" x="25" y="29" width="64" height="5" rx="2"/>  <rect fill="#707070" x="25" y="41" width="64" height="5" rx="2"/>  <rect x="8" y="56" width="60" height="9" rx="4"/>  <rect fill="#707070" x="25" y="73" width="64" height="5" rx="2"/>  <rect fill="#707070" x="25" y="85" width="64" height="5" rx="2"/></svg>',deflist_descr:'<svg height="'+l+'" width="'+l+'" viewBox="0 0 100 100">  <rect fill="#707070" x="8" y="12" width="60" height="9" rx="4"/>  <rect x="25" y="29" width="64" height="5" rx="2"/>  <rect x="25" y="41" width="64" height="5" rx="2"/>  <rect fill="#707070" x="8" y="56" width="60" height="9" rx="4"/>  <rect x="25" y="73" width="64" height="5" rx="2"/>  <rect x="25" y="85" width="64" height="5" rx="2"/></svg>'};t.options.register("deflist_icon",{processor:"string",default:""}),t.options.register("deflist_title_icon",{processor:"string",default:""}),t.options.register("deflist_descr_icon",{processor:"string",default:""});t.ui.registry.getAll().icons;const a=e=>{const i=t.options.get(e+"_icon");return""!==i?"<svg"===i.trim().substring(0,4).toLowerCase()?(t.ui.registry.addIcon(e,i),e):i:(e in t.ui.registry.getAll().icons||t.ui.registry.addIcon(e,h[e]),e)},c=a("deflist"),g=a("deflist_title"),u=a("deflist_descr");t.ui.registry.addSplitButton("deflist",{tooltip:"Definition-list",icon:c,fetch:e=>{t.selection.getNode();e([{type:"choiceitem",value:"dt",icon:g,text:"Definition-list title",enabled:"dd"==t.selection.getNode().nodeName.toLowerCase()},{type:"choiceitem",value:"dd",icon:u,text:"Definition-list description",enabled:"dt"==t.selection.getNode().nodeName.toLowerCase()}])},onAction:t=>tinymce.activeEditor.execCommand("InsertDefinitionList",!1,{}),onItemAction:(t,e)=>{"dd"===e?tinymce.activeEditor.execCommand("Indent",!1,{}):tinymce.activeEditor.execCommand("Outdent",!1,{})},onSetup:((t,e)=>i=>(i.setEnabled(t.selection.isEditable()),((t,e)=>{const i=t.selection.getNode();return e({parents:t.dom.getParents(i),element:i}),t.on("NodeChange",e),()=>t.off("NodeChange",e)})(t,(n=>{i.setActive(d(n.parents,e)),i.setEnabled(!((t,e)=>{const i=t.dom.getParent(e,"ol,ul,dl");return((t,e)=>null!==e&&!t.dom.isEditable(e))(t,i)})(t,n.element)&&t.selection.isEditable())}))))(t,"DL")}),t.ui.registry.addMenuItem("deflist_title",{icon:g,text:"Definition-list title",onAction:()=>{tinymce.activeEditor.execCommand("Outdent",!1,{})}}),t.ui.registry.addMenuItem("deflist_descr",{icon:u,text:"Definition-list description",onAction:()=>{tinymce.activeEditor.execCommand("Indent",!1,{})}}),t.ui.registry.addContextMenu("deflist",{update:t=>"dt"==t.nodeName.toLowerCase()?"deflist_descr":"dd"==t.nodeName.toLowerCase()?"deflist_title":""})})),tinymce.PluginManager.requireLangPack("deflist","de");